{"version":3,"sources":["dataProvider.js","authProvider.js","getProfileFromToken.js","LoginButton.js","LoginPage.js","Dashboard.js","App.js","registerServiceWorker.js","index.js"],"names":["apiUrl","httpClient","fetchUtils","fetchJson","httpHeaders","Headers","getList","resource","params","pagination","page","perPage","sort","field","order","query","JSON","stringify","range","filter","url","headers","then","json","has","Error","data","total","parseInt","get","split","pop","getOne","id","getMany","ids","getManyReference","target","update","method","body","updateMany","Promise","all","map","responses","create","delete","deleteMany","apiUri","process","userManager","UserManager","authority","client_id","redirect_uri","response_type","scope","authProvider","login","a","code","state","signinRedirect","reject","message","clearStaleState","stateKey","parse","localStorage","getItem","code_verifier","axios","responseType","setItem","resolve","logout","removeItem","checkError","error","status","clear","checkAuth","token","jwt","tokenJson","window","atob","id_token","getProfileFromToken","Date","getTime","exp","getPermissions","useStyles","makeStyles","theme","button","width","icon","marginRight","spacing","name","LoginButton","redirectTo","rest","classes","useLogin","useSafeSetState","loading","setLoading","handleLogin","catch","useEffect","searchParams","URL","location","href","CardActions","Button","onClick","variant","color","disabled","className","CircularProgress","size","thickness","defaultProps","LoginPage","Login","Card","CardHeader","title","CardContent","history","createBrowserHistory","Admin","dataProvider","loginPage","dashboard","Dashboard","Resource","list","ListGuesser","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","ReactDOM","render","App","document","getElementById","origin","addEventListener","fetch","response","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"kTAqCe,WAACA,GAAgH,IAAxGC,EAAuG,uDAA1FC,IAAWC,UAAWC,EAAoE,uDAAtD,IAAIC,QAAQ,CAAC,eAAgB,qBACtG,MAAQ,CACJC,QAAS,SAACC,EAAUC,GAAY,IAAD,EACDA,EAAOC,WAAzBC,EADmB,EACnBA,KAAMC,EADa,EACbA,QADa,EAEFH,EAAOI,KAAxBC,EAFmB,EAEnBA,MAAOC,EAFY,EAEZA,MACTC,EAAQ,CACVH,KAAMI,KAAKC,UAAU,CAACJ,EAAOC,IAC7BI,MAAOF,KAAKC,UAAU,EAAEP,EAAO,GAAKC,EAASD,EAAOC,EAAU,IAC9DQ,OAAQH,KAAKC,UAAUT,EAAOW,SAE5BC,EAAG,UAAMpB,EAAN,YAAgBO,EAAhB,YAA4BU,oBAAUF,IAE/C,OAAOd,EAAWmB,EAAK,CACrBC,QAASjB,IACRkB,MAAK,YAAwB,IAArBD,EAAoB,EAApBA,QAASE,EAAW,EAAXA,KAChB,IAAKF,EAAQG,IAAI,iBACb,MAAM,IAAIC,MACN,uTAIR,MAAO,CACHC,KAAMH,EAAKG,KACXC,MAAOC,SACHP,EACKQ,IAAI,iBACJC,MAAM,KACNC,MACL,SAMhBC,OAAQ,SAACzB,EAAUC,GAAX,OACJP,EAAW,GAAD,OAAID,EAAJ,YAAcO,EAAd,YAA0BC,EAAOyB,KAAMX,MAAK,kBAAe,CACjEI,KADkD,EAAGH,UAI7DW,QAAS,SAAC3B,EAAUC,GAChB,IAAMO,EAAQ,CACVI,OAAQH,KAAKC,UAAU,CAAEgB,GAAIzB,EAAO2B,OAElCf,EAAG,UAAMpB,EAAN,YAAgBO,EAAhB,YAA4BU,oBAAUF,IAC/C,OAAOd,EAAWmB,EAAK,CACrBC,QAASjB,IACRkB,MAAK,kBAAe,CAAEI,KAAjB,EAAGH,UAGfa,iBAAkB,SAAC7B,EAAUC,GAAY,IAAD,EACVA,EAAOC,WAAzBC,EAD4B,EAC5BA,KAAMC,EADsB,EACtBA,QADsB,EAEXH,EAAOI,KAAxBC,EAF4B,EAE5BA,MAAOC,EAFqB,EAErBA,MACTC,EAAQ,CACVH,KAAMI,KAAKC,UAAU,CAACJ,EAAOC,IAC7BI,MAAOF,KAAKC,UAAU,EAAEP,EAAO,GAAKC,EAASD,EAAOC,EAAU,IAC9DQ,OAAQH,KAAKC,UAAL,2BACDT,EAAOW,QADN,kBAEHX,EAAO6B,OAAS7B,EAAOyB,OAG1Bb,EAAG,UAAMpB,EAAN,YAAgBO,EAAhB,YAA4BU,oBAAUF,IAE/C,OAAOd,EAAWmB,EAAK,CACrBC,QAASjB,IACRkB,MAAK,YAAwB,IAArBD,EAAoB,EAApBA,QAASE,EAAW,EAAXA,KAChB,IAAKF,EAAQG,IAAI,iBACb,MAAM,IAAIC,MACN,uTAGR,MAAO,CACHC,KAAMH,EACNI,MAAOC,SACHP,EACKQ,IAAI,iBACJC,MAAM,KACNC,MACL,SAMhBO,OAAQ,SAAC/B,EAAUC,GAAX,OACJP,EAAW,GAAD,OAAID,EAAJ,YAAcO,EAAd,YAA0BC,EAAOyB,IAAM,CAC7CM,OAAQ,MACRlB,QAASjB,EACToC,KAAMxB,KAAKC,UAAUT,EAAOkB,QAC7BJ,MAAK,kBAAe,CAAEI,KAAjB,EAAGH,UAGfkB,WAAY,SAAClC,EAAUC,GAAX,OACRkC,QAAQC,IACJnC,EAAO2B,IAAIS,KAAI,SAAAX,GAAE,OACbhC,EAAW,GAAD,OAAID,EAAJ,YAAcO,EAAd,YAA0B0B,GAAM,CACtCM,OAAQ,MACRlB,QAASjB,EACToC,KAAMxB,KAAKC,UAAUT,EAAOkB,YAGtCJ,MAAK,SAAAuB,GAAS,MAAK,CAAEnB,KAAMmB,EAAUD,KAAI,qBAAGrB,KAAgBU,WAElEa,OAAQ,SAACvC,EAAUC,GAAX,OACJP,EAAW,GAAD,OAAID,EAAJ,YAAcO,GAAY,CAChCgC,OAAQ,OACRlB,QAASjB,EACToC,KAAMxB,KAAKC,UAAUT,EAAOkB,QAC7BJ,MAAK,gBAAGC,EAAH,EAAGA,KAAH,MAAe,CACnBG,KAAK,2BAAMlB,EAAOkB,MAAd,IAAoBO,GAAIV,EAAKU,UAGzCc,OAAQ,SAACxC,EAAUC,GAAX,OACJP,EAAW,GAAD,OAAID,EAAJ,YAAcO,EAAd,YAA0BC,EAAOyB,IAAM,CAC7CM,OAAQ,SACRlB,QAASjB,IACVkB,MAAK,kBAAe,CAAEI,KAAjB,EAAGH,UAGfyB,WAAY,SAACzC,EAAUC,GAAX,OACRkC,QAAQC,IACJnC,EAAO2B,IAAIS,KAAI,SAAAX,GAAE,OACbhC,EAAW,GAAD,OAAID,EAAJ,YAAcO,EAAd,YAA0B0B,GAAM,CACtCM,OAAQ,SACRlB,QAASjB,QAGnBkB,MAAK,SAAAuB,GAAS,MAAK,CAAEnB,KAAMmB,EAAUD,KAAI,qBAAGrB,KAAgBU,a,sDC3JhEgB,EAASC,wBAETC,EAAc,IAAIC,cAAY,CAChCC,UANW,+BAOXC,UANaJ,2EAObK,aANgBL,+BAOhBM,cAAe,OACfC,MAAO,yBAyEIC,EAtEM,CACnBC,MAAM,WAAD,4BAAE,kDAAAC,EAAA,0DAAOpD,EAAP,+BAAgB,KAELA,EAAOqD,MAASrD,EAAOsD,MAFlC,uBAGHX,EAAYY,iBAHT,kBAKIrB,QAAQsB,OAAO,CAAEC,QAAS,+CAAgDJ,KAAM,mBALpF,cASLV,EAAYe,kBAENC,EAXD,eAWoB3D,EAAOsD,OAX3B,EAYqB9C,KAAKoD,MAC3BC,aAAaC,QAAQH,IAAa,MAD9BI,EAZH,EAYGA,cAZH,SAkBkBC,IAAM,CAC3BjC,OAAQ,OACRnB,IAAI,GAAD,OAAK6B,EAAL,SACHvB,KAAM,CACJmC,KAAMrD,EAAOqD,KACbU,cAAeA,GAEjBE,aAAc,OACdpD,QAAS,CACP,cAAgB,UAAhB,OAA2Bb,EAAOqD,SA3BjC,uBAkBGnC,EAlBH,EAkBGA,KAaR2C,aAAaK,QAAQ,QAAS1D,KAAKC,UAAUS,IA/BxC,kBAgCEgB,QAAQiC,WAhCV,4CAAF,kDAAC,GAkCNC,OAAQ,WAGN,OAFAP,aAAaQ,WAAW,SAEjBnC,QAAQiC,WAEjBG,WAAY,SAACC,GAAW,IACdC,EAAWD,EAAXC,OAER,OAAIA,GAAsB,MAAXA,GAA6B,MAAXA,EAK1BtC,QAAQiC,WAJXN,aAAaY,QAENvC,QAAQsB,WAIrBkB,UAAW,SAAA1E,GACT,IAAM2E,EAAQd,aAAaC,QAAQ,SAEnC,IAAKa,EACH,OAAOzC,QAAQsB,SAIjB,IAAMoB,EC5EK,SAAAC,GACX,IAAMF,EAAQnE,KAAKoD,MAAMiB,GACnBD,EAAMpE,KAAKoD,MAAMkB,OAAOC,KAAKJ,EAAMK,SAAS1D,MAAM,KAAK,KAE7D,OAAO,aAAEG,GAAI,cAAiBmD,GDwElBK,CAAoBN,GAGhC,OAFY,IAAIO,MAELC,UAAuB,IAAVP,EAAIQ,IAAclD,QAAQsB,SAAWtB,QAAQiC,WAEvEkB,eAAgB,SAAArF,GACd,IAAM2E,EAAQd,aAAaC,QAAQ,SAEnC,OAAOa,EAAQzC,QAAQiC,QAAQQ,GAASzC,QAAQsB,W,gFE/E9C8B,EAAYC,aACd,SAACC,GAAD,MAAY,CACRC,OAAQ,CACJC,MAAO,QAEXC,KAAM,CACFC,YAAaJ,EAAMK,QAAQ,OAGnC,CAAEC,KAAM,kBAGZ,SAASC,EAAT,GAGG,EAFCC,WAEA,IADGC,EACJ,8BACOC,EAAUZ,IACVnC,EAAQgD,cAFf,EAG+BC,aAAgB,GAH/C,mBAGQC,EAHR,KAGiBC,EAHjB,KAKOC,EAAc,SAAClD,EAAMC,GACvBgD,GAAW,GACXnD,EAAM,CAAEE,OAAMC,UACTkD,OAAM,SAAAjC,QAaf,OAVAkC,qBAAU,WAAO,IACLC,EAAiB,IAAIC,IAAI7B,OAAO8B,SAASC,MAAzCH,aACFrD,EAAOqD,EAAarF,IAAI,QACxBiC,EAAQoD,EAAarF,IAAI,SAE3BgC,GAAQC,GACRiD,EAAYlD,EAAMC,KAEvB,IAGC,kBAACwD,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,iBACQd,EADR,CAEIe,QAAST,EACTU,QAAQ,YACRC,MAAM,UACNC,SAAUd,EACVe,UAAWlB,EAAQT,SAElBY,GACG,kBAACgB,EAAA,EAAD,CACID,UAAWlB,EAAQP,KACnB2B,KAAM,GACNC,UAAW,IAZvB,2BAyBZxB,EAAYyB,aAAe,CACzBxB,WAAY,KAGCD,QC5DA0B,EARG,WACd,OACI,kBAACC,EAAA,EAAD,KACI,kBAAC,EAAD,Q,2BCFG,oBACX,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,MAAM,2BAClB,kBAACC,EAAA,EAAD,gFCEAC,EAAUC,cAED,oBAAM,kBAACC,EAAA,EAAD,CACjBC,aAAcA,EAAa,yBAC3BhF,aAAcA,EACd6E,QAASA,EACTI,UAAWV,EACXW,UAAWC,GAGX,kBAACC,EAAA,EAAD,CAAUxC,KAAK,WAAWyC,KAAMC,QCV9BC,EAAcC,QACa,cAA7B5D,OAAO8B,SAAS+B,UAEiB,UAA7B7D,OAAO8B,SAAS+B,UAEhB7D,OAAO8B,SAAS+B,SAASC,MACrB,2DAsCZ,SAASC,EAAgBC,GACrBC,UAAUC,cACLC,SAASH,GACThI,MAAK,SAAAoI,GACFA,EAAaC,cAAgB,WACzB,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACE,cAA3BF,EAAiB9F,QACbyF,UAAUC,cAAcO,WAKxBC,QAAQC,IACJ,6CAMJD,QAAQC,IAAI,4CAM/BjD,OAAM,SAAAjC,GACHiF,QAAQjF,MAAM,4CAA6CA,MC3EvEmF,IAASC,OAAO,kBAACC,EAAD,MAASC,SAASC,eAAe,SDclC,WACX,GAA6C,kBAAmBf,UAAW,CAGvE,GADkB,IAAIpC,IAAIjE,IAAwBoC,OAAO8B,UAC3CmD,SAAWjF,OAAO8B,SAASmD,OAIrC,OAGJjF,OAAOkF,iBAAiB,QAAQ,WAC5B,IAAMlB,EAAK,UAAMpG,IAAN,sBAEP+F,IAmDhB,SAAiCK,GAE7BmB,MAAMnB,GACDhI,MAAK,SAAAoJ,GAGsB,MAApBA,EAAS1F,SAEJ,IADL0F,EAASrJ,QAAQQ,IAAI,gBAAgB8I,QAAQ,cAI7CpB,UAAUC,cAAcoB,MAAMtJ,MAAK,SAAAoI,GAC/BA,EAAamB,aAAavJ,MAAK,WAC3BgE,OAAO8B,SAAS0D,eAKxBzB,EAAgBC,MAGvBtC,OAAM,WACHgD,QAAQC,IACJ,oEAxEAc,CAAwBzB,GAIxBC,UAAUC,cAAcoB,MAAMtJ,MAAK,WAC/B0I,QAAQC,IACJ,gHAMRZ,EAAgBC,OCzChC0B,K","file":"static/js/main.6040b76a.chunk.js","sourcesContent":["import { stringify } from 'query-string';\nimport { fetchUtils } from 'ra-core';\n\n/**\n * Maps react-admin queries to a simple REST API\n *\n * This REST dialect is similar to the one of FakeRest\n *\n * @see https://github.com/marmelab/FakeRest\n *\n * @example\n *\n * getList     => GET http://my.api.url/posts?sort=['title','ASC']&range=[0, 24]\n * getOne      => GET http://my.api.url/posts/123\n * getMany     => GET http://my.api.url/posts?filter={id:[123,456,789]}\n * update      => PUT http://my.api.url/posts/123\n * create      => POST http://my.api.url/posts\n * delete      => DELETE http://my.api.url/posts/123\n *\n * @example\n *\n * import * as React from \"react\";\n * import { Admin, Resource } from 'react-admin';\n * import simpleRestProvider from 'ra-data-simple-rest';\n *\n * import { PostList } from './posts';\n *\n * const App = () => (\n *     <Admin dataProvider={simpleRestProvider('http://path.to.my.api/')}>\n *         <Resource name=\"posts\" list={PostList} />\n *     </Admin>\n * );\n *\n * export default App;\n */\n\n // The ra-rest-provider with a small modification to add an Http header so we can send the access_token to the api\nexport default (apiUrl, httpClient = fetchUtils.fetchJson, httpHeaders = new Headers({'Content-Type': 'application/json'})) => {\nreturn ({\n    getList: (resource, params) => {\n        const { page, perPage } = params.pagination;\n        const { field, order } = params.sort;\n        const query = {\n            sort: JSON.stringify([field, order]),\n            range: JSON.stringify([(page - 1) * perPage, page * perPage - 1]),\n            filter: JSON.stringify(params.filter),\n        };\n        const url = `${apiUrl}/${resource}?${stringify(query)}`;\n\n        return httpClient(url, {\n          headers: httpHeaders\n        }).then(({ headers, json }) => {\n            if (!headers.has('content-range')) {\n                throw new Error(\n                    'The Content-Range header is missing in the HTTP Response. The simple REST data provider expects responses for lists of resources to contain this header with the total number of results to build the pagination. If you are using CORS, did you declare Content-Range in the Access-Control-Expose-Headers header?'\n                );\n            }\n\n            return {\n                data: json.data,\n                total: parseInt(\n                    headers\n                        .get('content-range')\n                        .split('/')\n                        .pop(),\n                    10\n                ),\n            };\n        });\n    },\n\n    getOne: (resource, params) =>\n        httpClient(`${apiUrl}/${resource}/${params.id}`).then(({ json }) => ({\n            data: json,\n        })),\n\n    getMany: (resource, params) => {\n        const query = {\n            filter: JSON.stringify({ id: params.ids }),\n        };\n        const url = `${apiUrl}/${resource}?${stringify(query)}`;\n        return httpClient(url, {\n          headers: httpHeaders\n        }).then(({ json }) => ({ data: json }));\n    },\n\n    getManyReference: (resource, params) => {\n        const { page, perPage } = params.pagination;\n        const { field, order } = params.sort;\n        const query = {\n            sort: JSON.stringify([field, order]),\n            range: JSON.stringify([(page - 1) * perPage, page * perPage - 1]),\n            filter: JSON.stringify({\n                ...params.filter,\n                [params.target]: params.id,\n            }),\n        };\n        const url = `${apiUrl}/${resource}?${stringify(query)}`;\n\n        return httpClient(url, {\n          headers: httpHeaders\n        }).then(({ headers, json }) => {\n            if (!headers.has('content-range')) {\n                throw new Error(\n                    'The Content-Range header is missing in the HTTP Response. The simple REST data provider expects responses for lists of resources to contain this header with the total number of results to build the pagination. If you are using CORS, did you declare Content-Range in the Access-Control-Expose-Headers header?'\n                );\n            }\n            return {\n                data: json,\n                total: parseInt(\n                    headers\n                        .get('content-range')\n                        .split('/')\n                        .pop(),\n                    10\n                ),\n            };\n        });\n    },\n\n    update: (resource, params) =>\n        httpClient(`${apiUrl}/${resource}/${params.id}`, {\n            method: 'PUT',\n            headers: httpHeaders,\n            body: JSON.stringify(params.data),\n        }).then(({ json }) => ({ data: json })),\n\n    // simple-rest doesn't handle provide an updateMany route, so we fallback to calling update n times instead\n    updateMany: (resource, params) =>\n        Promise.all(\n            params.ids.map(id =>\n                httpClient(`${apiUrl}/${resource}/${id}`, {\n                    method: 'PUT',\n                    headers: httpHeaders,\n                    body: JSON.stringify(params.data),\n                })\n            )\n        ).then(responses => ({ data: responses.map(({ json }) => json.id) })),\n\n    create: (resource, params) =>\n        httpClient(`${apiUrl}/${resource}`, {\n            method: 'POST',\n            headers: httpHeaders,\n            body: JSON.stringify(params.data),\n        }).then(({ json }) => ({\n            data: { ...params.data, id: json.id },\n        })),\n\n    delete: (resource, params) =>\n        httpClient(`${apiUrl}/${resource}/${params.id}`, {\n            method: 'DELETE',\n            headers: httpHeaders,\n        }).then(({ json }) => ({ data: json })),\n\n    // simple-rest doesn't handle filters on DELETE route, so we fallback to calling DELETE n times instead\n    deleteMany: (resource, params) =>\n        Promise.all(\n            params.ids.map(id =>\n                httpClient(`${apiUrl}/${resource}/${id}`, {\n                    method: 'DELETE',\n                    headers: httpHeaders,\n                })\n            )\n        ).then(responses => ({ data: responses.map(({ json }) => json.id) })),\n  })\n}\n\n","import { UserManager } from 'oidc-client';\nimport axios from 'axios';\n\nimport getProfileFromToken from './getProfileFromToken'\n\nconst issuer = 'https://accounts.google.com/';\nconst clientId = process.env.REACT_APP_CLIENT_ID;\nconst redirectUri = process.env.REACT_APP_REDIRECT_URI;\nconst apiUri = process.env.REACT_APP_API_URL;\n\nconst userManager = new UserManager({\n    authority: issuer,\n    client_id: clientId,\n    redirect_uri: redirectUri,\n    response_type: 'code',\n    scope: 'openid email profile'\n});\n\nconst authProvider = {\n  login: async (params = {}) => {\n    // We need to check that a params object is actually passed otherwise it will fail.\n    if (!params || !params.code || !params.state) {\n      userManager.signinRedirect();\n      // Here we reject the request because there is no notification shown, but we can add an object if we want to add logic in the login call.\n      return Promise.reject({ message: 'Retrieving code from authentication service.', code: 'oauthRedirect'});\n    }\n    \n    // Remove stale states, this is \n    userManager.clearStaleState();\n    // The UserManager stores state to localStorage this is the key so we need to retreive it on redirect. \n    const stateKey = `oidc.${params.state}`;\n    const { code_verifier } = JSON.parse(\n        localStorage.getItem(stateKey) || '{}'\n    );\n\n\n    // Send the request for the token using the code to our authenticator.\n    const { data } = await axios({\n      method: 'POST',\n      url: `${apiUri}/auth`,\n      data: {\n        code: params.code,\n        code_verifier: code_verifier\n      },\n      responseType: 'json',\n      headers: {\n        'Authorization': `Bearer ${params.code}`\n      }\n    })\n\n    localStorage.setItem('token', JSON.stringify(data));\n    return Promise.resolve();\n  },\n  logout: () => {\n    localStorage.removeItem('token')\n\n    return Promise.resolve();\n  },\n  checkError: (error) => {\n    const { status } = error;\n\n    if (status && (status === 401 || status === 403)) {\n        localStorage.clear();\n\n        return Promise.reject();\n    }\n    return Promise.resolve();\n  },\n  checkAuth: params => {\n    const token = localStorage.getItem('token')\n\n    if (!token) {\n      return Promise.reject()\n    }\n\n    // This is specific to the Google authentication implementation\n    const jwt = getProfileFromToken(token);\n    const now = new Date();\n\n    return now.getTime() > (jwt.exp * 1000) ? Promise.reject() : Promise.resolve()\n  },\n  getPermissions: params => {\n    const token = localStorage.getItem('token');\n\n    return token ? Promise.resolve(token) : Promise.reject()\n    }\n  }\n\nexport default authProvider;","export default tokenJson => {\n    const token = JSON.parse(tokenJson);\n    const jwt = JSON.parse(window.atob(token.id_token.split('.')[1]));\n\n    return { id: 'my-profile', ...jwt }\n}\n","import React, { useEffect, useState } from 'react';\nimport { useSafeSetState, useLogin } from 'react-admin'\nimport PropTypes from 'prop-types';\nimport { Button, CardActions, CircularProgress, makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles(\n    (theme) => ({\n        button: {\n            width: '100%',\n        },\n        icon: {\n            marginRight: theme.spacing(1),\n        },\n    }),\n    { name: 'RaLoginButton' }\n);\n\nfunction LoginButton ({ \n    redirectTo,\n    ...rest\n}) {\n    const classes = useStyles();\n    const login = useLogin();\n    const [loading, setLoading] = useSafeSetState(false);\n\n    const handleLogin = (code, state) => {\n        setLoading(true)\n        login({ code, state })\n            .catch(error => {})\n    }\n\n    useEffect(() => {\n        const { searchParams } = new URL(window.location.href);\n        const code = searchParams.get('code');\n        const state = searchParams.get('state');\n\n        if (code && state) {\n            handleLogin(code, state);\n        }\n    }, [])\n\n    return (\n        <CardActions>\n            <Button\n                {...rest}\n                onClick={handleLogin}\n                variant=\"contained\"\n                color=\"primary\"\n                disabled={loading}\n                className={classes.button}\n            >\n                {loading && (\n                    <CircularProgress\n                        className={classes.icon}\n                        size={18}\n                        thickness={2}\n                    />\n                )}\n              Logging in with Google\n            </Button>\n        </CardActions>\n    );\n};\n\nLoginButton.propTypes = {\n    redirectTo: PropTypes.string,\n};\n\nLoginButton.defaultProps = {\n  redirectTo: '/'\n}\n\nexport default LoginButton;\n","import React from 'react'\nimport { Login } from 'react-admin'\nimport LoginButton from './LoginButton'\n\nconst LoginPage = () => {\n    return (\n        <Login>\n            <LoginButton />\n        </Login>)\n    ;\n}\n\nexport default LoginPage;","import React from 'react';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\n\nexport default () => (\n    <Card>\n      <CardHeader title=\"Welcome to React Admin\" />\n      <CardContent>From this application you will be able to interact with Google OAuth.</CardContent>\n    </Card>\n);\n","import React from 'react';\nimport { Admin, Resource, ListGuesser } from 'react-admin';\nimport { createBrowserHistory } from 'history';\n\nimport dataProvider from './dataProvider';\nimport authProvider from './authProvider';\nimport LoginPage from './LoginPage'\nimport Dashboard from './Dashboard';\n\n// We need to have our own history as Google OAuth does not allow fragments i.e. 'https://basurl/#/login'\nconst history = createBrowserHistory();\n\nexport default () => <Admin\n    dataProvider={dataProvider('http://localhost:8080')}\n    authProvider={authProvider}\n    history={history}\n    loginPage={LoginPage}\n    dashboard={Dashboard}\n    >\n  \n    <Resource name=\"resource\" list={ListGuesser}/>\n</Admin>;","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n);\n\nexport default function register() {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Lets check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://goo.gl/SC7cgQ'\n                    );\n                });\n            } else {\n                // Is not local host. Just register service worker\n                registerValidSW(swUrl);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the old content will have been purged and\n                            // the fresh content will have been added to the cache.\n                            // It's the perfect time to display a \"New content is\n                            // available; please refresh.\" message in your web app.\n                            console.log(\n                                'New content is available; please refresh.'\n                            );\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            if (\n                response.status === 404 ||\n                response.headers.get('content-type').indexOf('javascript') ===\n                    -1\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}